{"ast":null,"code":"import _objectSpread from \"/Users/spencerbackman/Development/mr-cash/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/spencerbackman/Development/mr-cash/client/src/EmailForm.js\";\nimport React from 'react';\nimport Dropzone from './Dropzone';\nimport Progress from './Progress';\nimport './assets/scss/form.scss';\n\nclass EmailForm extends React.Component {\n  constructor() {\n    super();\n\n    this.onFilesAdded = files => {\n      this.setState(prevState => ({\n        files: prevState.files.concat(files)\n      }));\n    };\n\n    this.sendRequest = file => {\n      return new Promise((resolve, reject) => {\n        const req = new XMLHttpRequest();\n        req.upload.addEventListener(\"progress\", event => {\n          if (event.lengthComputable) {\n            const copy = _objectSpread({}, this.state.uploadProgress);\n\n            copy[file.name] = {\n              state: \"pending\",\n              percentage: event.loaded / event.total * 100\n            };\n            this.setState({\n              uploadProgress: copy\n            });\n          }\n        });\n        req.upload.addEventListener(\"load\", event => {\n          const copy = _objectSpread({}, this.state.uploadProgress);\n\n          copy[file.name] = {\n            state: \"done\",\n            percentage: 100\n          };\n          this.setState({\n            uploadProgress: copy\n          });\n          resolve(req.response);\n        });\n        req.upload.addEventListener(\"error\", event => {\n          const copy = _objectSpread({}, this.state.uploadProgress);\n\n          copy[file.name] = {\n            state: \"error\",\n            percentage: 0\n          };\n          this.setState({\n            uploadProgress: copy\n          });\n          reject(req.response);\n        });\n        const formData = new FormData();\n        formData.append(\"file\", file, file.name);\n        req.open(\"POST\", \"http://localhost:5000/upload\");\n        req.send(formData);\n      });\n    };\n\n    this.sendEmail = e => {\n      e.preventDefault();\n      const email = {\n        name: this.state.name,\n        replyTo: this.state.from,\n        phone: this.state.phone,\n        description: this.state.description,\n        images: this.state.attachments\n      };\n      console.log(email);\n      fetch(\"/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: email\n      }).then(response => response.json());\n      this.setState({\n        name: '',\n        from: '',\n        phone: '',\n        description: '',\n        attachments: {}\n      });\n    };\n\n    this.handleChange = e => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.renderActions = () => {\n      if (this.state.successfullUploaded) {\n        return React.createElement(\"button\", {\n          onClick: () => {\n            this.setState({\n              files: [],\n              successfullUploaded: false\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"Clear\");\n      } else {\n        return React.createElement(\"button\", {\n          disabled: this.state.files.length < 0 || this.state.uploading,\n          onClick: this.uploadFiles,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \"Upload\");\n      }\n    };\n\n    this.state = {\n      name: '',\n      from: '',\n      phone: '',\n      description: '',\n      attachments: {},\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    this.uploadFiles = this.uploadFiles.bind(this);\n  }\n\n  async uploadFiles() {\n    this.setState({\n      uploadProgress: {},\n      uploading: true\n    });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n\n    try {\n      await Promise.all(promises);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    } catch (e) {\n      console.log(e);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"form-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.sendEmail,\n      className: \"email-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      className: \"input\",\n      placeholder: \"NAME*\",\n      value: this.state.name,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"from\",\n      className: \"input\",\n      placeholder: \"EMAIL*\",\n      value: this.state.from,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      name: \"phone\",\n      className: \"input\",\n      placeholder: \"PHONE\",\n      value: this.state.phone,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"description\",\n      className: \"input\",\n      placeholder: \"DESCRIPTION*\",\n      value: this.state.description,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onFilesAdded: this.onFilesAdded,\n      disabled: this.state.uploading || this.state.successfullUploaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.state.files.map(file => {\n      return React.createElement(\"div\", {\n        key: file.name,\n        className: \"Row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"Filename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \" \", file.name, \" \"), this.renderProgress(file));\n    })), React.createElement(\"div\", {\n      className: \"Actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \" \", this.renderActions(), \" \"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \" GET YOUR OFFER! \")));\n  }\n\n}\n\nexport default EmailForm;","map":{"version":3,"sources":["/Users/spencerbackman/Development/mr-cash/client/src/EmailForm.js"],"names":["React","Dropzone","Progress","EmailForm","Component","constructor","onFilesAdded","files","setState","prevState","concat","sendRequest","file","Promise","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","copy","state","uploadProgress","name","percentage","loaded","total","response","formData","FormData","append","open","send","sendEmail","e","preventDefault","email","replyTo","from","phone","description","images","attachments","console","log","fetch","method","headers","body","then","json","handleChange","target","value","renderActions","successfullUploaded","length","uploading","uploadFiles","bind","promises","forEach","push","all","render","map","renderProgress"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dropzone from './Dropzone';\nimport Progress from './Progress';\nimport './assets/scss/form.scss';\n\nclass EmailForm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            name: '',\n            from: '',\n            phone: '',\n            description: '',\n            attachments: {},\n            files: [],\n            uploading: false,\n            uploadProgress: {},\n            successfullUploaded: false\n        }\n        this.uploadFiles = this.uploadFiles.bind(this);\n    }\n\n    onFilesAdded = (files) => {\n        this.setState(prevState => ({\n            files: prevState.files.concat(files)\n        }))\n    }\n\n    async uploadFiles() {\n        this.setState({ uploadProgress: {}, uploading: true });\n        const promises = [];\n        this.state.files.forEach(file => {\n            promises.push(this.sendRequest(file));\n        })\n        try {\n            await Promise.all(promises);\n\n            this.setState({ successfullUploaded: true, uploading: false })\n        } catch (e) {\n            console.log(e)\n            this.setState({ successfullUploaded: true, uploading: false })\n        }\n    }\n\n\n    sendRequest = file => {\n        return new Promise((resolve, reject) => {\n            const req = new XMLHttpRequest();\n\n            req.upload.addEventListener(\"progress\", event => {\n                if (event.lengthComputable) {\n                    const copy = { ...this.state.uploadProgress };\n                    copy[file.name] = {\n                        state: \"pending\",\n                        percentage: (event.loaded / event.total) * 100\n                    }\n                    this.setState({ uploadProgress: copy });\n                }\n            });\n\n            req.upload.addEventListener(\"load\", event => {\n                const copy = { ...this.state.uploadProgress };\n                copy[file.name] = { state: \"done\", percentage: 100 };\n                this.setState({ uploadProgress: copy });\n                resolve(req.response);\n            })\n\n            req.upload.addEventListener(\"error\", event => {\n                const copy = { ...this.state.uploadProgress };\n                copy[file.name] = { state: \"error\", percentage: 0 };\n                this.setState({ uploadProgress: copy });\n                reject(req.response);\n            });\n\n            const formData = new FormData();\n            formData.append(\"file\", file, file.name);\n\n            req.open(\"POST\", \"http://localhost:5000/upload\");\n            req.send(formData);\n        })\n    }\n    sendEmail = (e) => {\n        e.preventDefault();\n        const email = {\n            name: this.state.name,\n            replyTo: this.state.from,\n            phone: this.state.phone,\n            description: this.state.description,\n            images: this.state.attachments\n        }\n        console.log(email)\n        fetch(\"/upload\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: email\n        }).then(response => response.json())\n        this.setState({\n            name: '',\n            from: '',\n            phone: '',\n            description: '',\n            attachments: {}\n        })\n    }\n    handleChange = e => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n\n    renderActions = () => {\n        if(this.state.successfullUploaded) {\n            return (\n                <button onClick={() => {\n                    this.setState({ files: [], successfullUploaded: false })}}\n                >\n                Clear\n                </button>\n            );\n        } else {\n            return (\n                <button disabled={this.state.files.length < 0 || this.state.uploading} onClick={this.uploadFiles}>\n                    Upload\n                </button>\n            )\n        }\n    }\n\n\n    render() {\n        return (\n            <div id=\"form-page\">\n                <form onSubmit={this.sendEmail} className=\"email-form\">\n                    <div className=\"form-row\">\n                        <input type=\"text\" name=\"name\" className=\"input\" placeholder=\"NAME*\" value={this.state.name} onChange={this.handleChange} />\n                    </div> \n                    <div className=\"form-row\">\n                        <input type=\"text\" name=\"from\" className=\"input\" placeholder=\"EMAIL*\" value={this.state.from} onChange={this.handleChange} />\n                    </div>\n                    <div className=\"form-row\">\n                        <input type=\"number\" name=\"phone\" className=\"input\" placeholder=\"PHONE\" value={this.state.phone} onChange={this.handleChange} />\n                    </div>\n                    <div className=\"form-row\">\n                        <input type=\"text\" name=\"description\" className=\"input\" placeholder=\"DESCRIPTION*\" value={this.state.description} onChange={this.handleChange} />\n                    </div>\n                    <div className=\"form-row\">\n                        <Dropzone onFilesAdded={this.onFilesAdded} disabled={this.state.uploading || this.state.successfullUploaded} />\n                    </div>\n                    <div className=\"Files\">\n                        {this.state.files.map(file => {\n                            return (\n                                <div key={file.name} className=\"Row\">\n                                    <span className=\"Filename\"> {file.name} </span>\n                                    {this.renderProgress(file)}\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div className=\"Actions\"> {this.renderActions()} </div>\n                    <button> GET YOUR OFFER! </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EmailForm"]},"metadata":{},"sourceType":"module"}