{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport axios from 'axios';\nexport function sendEmail(email) {\n  return dispatch => {\n    axios.post('/api/send_email', email).then(response => {\n      dispatch({\n        type: 'SEND_EMAIL',\n        email: response\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}\nconst initialEmail = [];\n\nconst reducer = (email = initialEmail, action) => {\n  switch (action.type) {\n    case \"SEND_EMAIL\":\n      return action.email;\n\n    default:\n      return email;\n  }\n};\n\nexport default createStore(reducer, applyMiddleware(thunk));","map":{"version":3,"sources":["/Users/spencerbackman/Development/mr-cash/client/src/redux/index.js"],"names":["createStore","applyMiddleware","thunk","axios","sendEmail","email","dispatch","post","then","response","type","catch","err","console","log","initialEmail","reducer","action"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC7B,SAAOC,QAAQ,IAAI;AACfH,IAAAA,KAAK,CAACI,IAAN,CAAW,iBAAX,EAA8BF,KAA9B,EAAqCG,IAArC,CAA0CC,QAAQ,IAAI;AAClDH,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAE,YADD;AAELL,QAAAA,KAAK,EAAEI;AAFF,OAAD,CAAR;AAIH,KALD,EAKGE,KALH,CAKSC,GAAG,IAAI;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KALlC;AAMH,GAPD;AAQH;AAED,MAAMG,YAAY,GAAG,EAArB;;AAEA,MAAMC,OAAO,GAAG,CAACX,KAAK,GAAGU,YAAT,EAAuBE,MAAvB,KAAkC;AAC9C,UAAOA,MAAM,CAACP,IAAd;AACI,SAAK,YAAL;AACI,aAAOO,MAAM,CAACZ,KAAd;;AACJ;AACI,aAAOA,KAAP;AAJR;AAMH,CAPD;;AASA,eAAeL,WAAW,CACtBgB,OADsB,EAEtBf,eAAe,CAACC,KAAD,CAFO,CAA1B","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport axios from 'axios';\n\n\nexport function sendEmail(email) {\n    return dispatch => {\n        axios.post('/api/send_email', email).then(response => {\n            dispatch({\n                type: 'SEND_EMAIL',\n                email: response\n            })\n        }).catch(err => {console.log(err)})\n    }\n}\n\nconst initialEmail = [];\n\nconst reducer = (email = initialEmail, action) => {\n    switch(action.type) {\n        case \"SEND_EMAIL\":\n            return action.email;\n        default: \n            return email\n    }\n}\n\nexport default createStore(\n    reducer, \n    applyMiddleware(thunk)\n)"]},"metadata":{},"sourceType":"module"}